---
import { Image } from 'astro:assets';
import { getImage } from 'astro:assets';
import type { UnresolvedImageTransform } from 'astro';

import Button from '#/components/ui/Button/Button.astro';
import type { Hero as Props } from '#/types';
import { isStr } from '@bpm2025-website/shared/validation';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,

  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image,

  id,
  bg
} = Astro.props;

const { src } = bg ? await getImage({ src: bg } as UnresolvedImageTransform) : {};
---

<section class="not-prose dark bg-dark relative lg:-mt-20" {...id ? { id } : {}}>
  <span
    class:list={[
      'absolute inset-0 opacity-30 pointer-events-none',
      'bg-fixed bg-cover bg-center bg-no-repeat'
    ]}
    style={isStr(src) ? { backgroundImage: `url(${src})` } : undefined}
    aria-hidden="true">
  </span>
  <div class="mx-auto px-4 max-w-7xl relative sm:px-6">
    <div class="pt-0 pointer-events-none md:pt-[76px]"></div>
    <div class="py-12 md:py-20">
      <div class={`text-center pb-10 md:pb-16 mx-auto ${content ? 'lg:flex' : 'max-w-5xl'}`}>
        {content && (
          <div>
            <Fragment set:html={content} />
          </div>
        )}
        <div class={subtitle && 'text-bg-shadow'}>
          {
            tagline && (
              <p
                class="text-base text-secondary tracking-wide font-bold uppercase dark:text-blue-200"
                set:html={tagline}
              />
            )
          }
          {
            title && (
              <h1
                class="text-5xl leading-tight tracking-tighter font-bold font-heading mb-4 md:text-6xl dark:text-gray-200"
                set:html={title}
              />
            )
          }
          <div class="mx-auto max-w-3xl">
            {subtitle && <p class="text-xl mb-6 dark:text-slate-300" set:html={subtitle} />}
            {
              actions && (
                <div class="m-auto flex flex-col flex-nowrap gap-4 max-w-xs sm:flex-row sm:max-w-md sm:justify-center">
                  {Array.isArray(actions)
                    ? (
                        actions.map(action => (
                          <div class="flex w-full sm:w-auto">
                            <Button {...(action || {})} class="w-full sm:mb-0" />
                          </div>
                        ))
                      )
                    : (
                        <Fragment set:html={actions} />
                      )}
                </div>
              )
            }
          </div>
        </div>
      </div>
      <div>
        {
          image && (
            <div class="m-auto max-w-5xl relative">
              {/* @ts-expect-error - Track https://github.com/withastro/astro/issues/10780 */}
              <Image
                class="mx-auto rounded-md w-full"
                sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
                loading="eager"
                height={576}
                {...image}
              />
            </div>
          )
        }
      </div>
    </div>
  </div>
</section>

<style>
.text-bg-shadow {
  background:
    radial-gradient(
      ellipse closest-side,
      color-mix(in srgb, var(--colors-page) 80%, transparent) 0%,
      color-mix(in srgb, var(--colors-page) 75%, transparent) 30%,
      color-mix(in srgb, var(--colors-page) 65%, transparent) 50%,
      color-mix(in srgb, var(--colors-page) 40%, transparent) 85%,
      color-mix(in srgb, var(--colors-page) 30%, transparent) 92%,
      color-mix(in srgb, var(--colors-page) 15%, transparent) 95%,
      color-mix(in srgb, var(--colors-page) 8%, transparent) 97%,
      color-mix(in srgb, var(--colors-page) 0%, transparent) 100%
    );
}
</style>
