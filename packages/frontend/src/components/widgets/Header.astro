---
import Logo from '#/components/ui/Logo.astro';
import ToggleTheme from '#/components/ui/ToggleTheme.astro';
import ToggleMenu from '#/components/ui/ToggleMenu.astro';
import Button from '#/components/ui/Button/Button.astro';

import { getHomePermalink } from '#/utils/permalinks';
import { getHeaderData } from '#/data/navigation';
import { trimSlash, getAsset } from '#/utils/permalinks';
import type { CallToAction, MenuLink } from '#/types';

export interface Props {
  id?: string;
  links?: MenuLink[];
  actions?: CallToAction[];
  isSticky?: boolean;
  isDark?: boolean;
  isFullWidth?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  position?: string;
}

const url = Astro.url;
const headerData = getHeaderData(url);

const {
  links = headerData.links,
  actions = headerData.actions,
  isSticky = false,
  isDark = false,
  isFullWidth = false,
  showToggleTheme = false,
  showRssFeed = false,
  position = 'center'
} = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;
---

<header
  class:list={[
    { sticky: isSticky, relative: !isSticky, dark: isDark },
    'top-0 z-40 flex-none mx-auto w-full border-b border-gray-50/0'
  ]}
  data-aw-sticky-header={isSticky || undefined}>
  {/* Needed so the expanded menu is correctly shown when scrolled down */}
  <div class="inset-0 absolute"></div>
  <div
    class:list={[
      'relative text-default py-3 px-3 lg:px-6 mx-auto w-full',
      {
        'lg:flex lg:justify-between': position !== 'center'
      },
      {
        'lg:grid lg:grid-cols-3 lg:items-center': position === 'center'
      },
      {
        'max-w-7xl': !isFullWidth
      }
    ]}
  >
    <div class:list={[{ 'mr-auto rtl:mr-0 rtl:ml-auto': position === 'right' }, 'flex justify-between']}>
      <a class="flex items-center" href={getHomePermalink()}>
        <Logo />
      </a>
      <div class="flex items-center lg:hidden">
        <ToggleMenu />
      </div>
    </div>
    <nav
      class="text-default w-full hidden items-center overflow-x-hidden overflow-y-auto lg:mx-5 lg:flex lg:w-auto lg:justify-self-center lg:overflow-x-auto lg:overflow-y-visible"
      aria-label="Main navigation"
    >
      <ul
        class="text-xl tracking-[0.01rem] font-medium flex flex-col w-full lg:text-[0.9375rem] lg:flex-row lg:w-auto lg:self-center lg:justify-center"
      >
        {
          (links ?? []).map(({ text, href, links }) => (
            <li class={links?.length ? 'dropdown' : ''}>
              {links?.length
                ? (
                    <>
                      <span class="px-4 py-3 flex cursor-pointer items-center dark:hover:text-white">
                        {text}{' '}
                        <div class="i-tabler:chevron-down ml-0.5 h-3.5 w-3.5 hidden rtl:ml-0 rtl:mr-0.5 lg:inline" />
                      </span>
                      <ul class="dropdown-menu font-medium pl-4 rounded-xs drop-shadow-xl lg:pl-0 lg:bg-white/90 lg:min-w-[200px] lg:hidden lg:absolute lg:backdrop-blur-md dark:lg:bg-dark">
                        {links.map(({ text: text2, href: href2 }) => (
                          <li>
                            <a
                              class:list={[
                                'first:rounded-t last:rounded-b lg:hover:bg-gray-100 dark:hover:text-white dark:hover:bg-gray-700 py-2 px-5 block whitespace-nowrap'
                              ]}
                              href={href2}
                            >
                              {text2}
                            </a>
                          </li>
                        ))}
                      </ul>
                    </>
                  )
                : (
                    <a
                      class:list={[
                        'dark:hover:text-white px-4 py-3 flex items-center'
                      ]}
                      href={href}
                    >
                      {text}
                    </a>
                  )}
            </li>
          ))
        }
      </ul>
    </nav>
    <div
      class:list={[
        { 'ml-auto rtl:ml-0 rtl:mr-auto': position === 'left' },
        'hidden lg:self-center lg:flex items-center lg:mb-0 fixed w-full lg:w-auto lg:static justify-end left-0 rtl:left-auto rtl:right-0 bottom-0 p-3 lg:p-0 lg:justify-self-end'
      ]}
    >
      <div class="flex w-full items-center justify-between lg:w-auto">
        <div class="flex">
          {showToggleTheme && <ToggleTheme iconClass="!w-6 !h-6 !lg:w-5 !lg:h-5 lg:inline-block" />}
          {
            showRssFeed && (
              <a
                class="text-sm text-muted p-2.5 rounded-lg inline-flex items-center dark:text-gray-400 focus:outline-hidden hover:bg-gray-100 focus:ring-4 focus:ring-gray-200 dark:hover:bg-gray-700 dark:focus:ring-gray-700"
                aria-label="RSS Feed"
                href={getAsset('/rss.xml')}
              >
                <div class="i-tabler:rss h-5 w-5" />
              </a>
            )
          }
        </div>
        {
          actions?.length
            ? (
                <span class="ml-2 rtl:ml-0 rtl:mr-2">
                  {actions.map(btnProps => (
                    <Button {...btnProps} class="text-sm font-semibold px-5.5 py-2.5 w-auto shadow-none lg:px-6" />
                  ))}
                </span>
              )
            : (
                <></>
              )
        }
      </div>
    </div>
  </div>
</header>

<style>
  header.scroll > div:first-child {
    --at-apply: bg-page md:bg-white/90 md:backdrop-blur-md;
    box-shadow: 0 0.375rem 1.5rem 0 rgb(140 152 164 / 13%);
  }

  :global(.dark) header.scroll > div:first-child,
  header.scroll.dark > div:first-child {
    --at-apply: bg-page md:bg-[#030621e6] border-b border-gray-500/20;
    box-shadow: none;
  }

  header.expanded nav {
    position: fixed;
    top: 70px;
    left: 0;
    right: 0;
    bottom: 70px !important;
    padding: 0 5px;
  }

  header.expanded {
    --at-apply: fixed;
  }

  .dropdown:focus .dropdown-menu,
  .dropdown:focus-within .dropdown-menu,
  .dropdown:hover .dropdown-menu {
    --at-apply: block;
  }
</style>
