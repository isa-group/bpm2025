---
import type { Content as Props } from '#/types';
import Headline from '#/components/ui/Headline.astro';
import WidgetWrapper from '#/components/ui/WidgetWrapper.astro';
import { Image } from 'astro:assets';
import Button from '#/components/ui/Button/Button.astro';
import ItemGrid from '#/components/ui/ItemGrid.astro';
import { isStr } from '@bpm2025-website/shared/validation';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  content = await Astro.slots.render('content'),
  callsToAction,
  items = [],
  columns,
  images,
  isReversed = false,
  isAfterContent = false,

  id,
  isDark = false,
  classes = {},
  bg
} = Astro.props;
---

<WidgetWrapper
  id={id}
  isDark={isDark}
  containerClass={`max-w-7xl mx-auto ${isAfterContent ? 'pt-0 md:pt-0 lg:pt-0' : ''} ${classes?.container ?? ''}`}
  bg={bg}
>
  <Headline
    title={title}
    subtitle={subtitle}
    tagline={tagline}
    classes={{
      container: 'max-w-xl sm:mx-auto lg:max-w-2xl',
      title: 'text-4xl md:text-5xl font-bold tracking-tighter mb-4 font-heading',
      subtitle: 'max-w-3xl mx-auto sm:text-center text-xl text-muted dark:text-slate-400'
    }}
  />
  <div class="mx-auto max-w-7xl p-4 md:px-8">
    <div class={`md:flex ${isReversed ? 'md:flex-row-reverse' : ''} md:gap-16 ${classes?.content ?? ''}`}>
      <div class={`${images?.length ? 'md:basis-1/2' : ''} self-center`}>
        {content && <div class="mb-12 text-lg dark:text-slate-400" set:html={content} />}

        {
          callsToAction && callsToAction.length && (
            callsToAction.map(c => (
              <div class="mb-8 mt-[-25px] text-primary">
                <Button variant="link" {...c} />
              </div>
            ))
          )
        }

        <ItemGrid
          items={items}
          columns={columns}
          classes={{
            container: 'gap-y-4 md:gap-y-8 max-w-full',
            panel: 'max-w-none',
            title: 'text-lg font-medium leading-6 dark:text-white ml-2 rtl:ml-0 rtl:mr-2',
            description: 'text-muted dark:text-slate-400 ml-2 rtl:ml-0 rtl:mr-2',
            icon: 'flex h-7 w-7 items-center justify-center rounded-full bg-green-600 dark:bg-green-700 text-gray-50 p-1',
            action: 'text-lg font-medium leading-6 dark:text-white ml-2 rtl:ml-0 rtl:mr-2',
            ...classes
          }}
        >
          <slot name="default-icon" slot="default-icon" />
        </ItemGrid>
      </div>
      {
        images && images.length && (
          <div aria-hidden="true" class="mt-10 md:mt-0 md:basis-1/2">
            {images.map(i => (
              <div class="relative m-auto max-w-4xl">
                {/* @ts-expect-error - Track https://github.com/withastro/astro/issues/10780 */}
                <Image
                  class={`mx-auto w-full rounded-lg shadow-lg ${classes?.images ?? ''}`}
                  height={500}
                  sizes="(max-width: 768px) 100vw, 432px"
                  {...i}
                  description={undefined}
                />
                <p class="py-2 text-center">
                  {i.description === true ? i.alt : isStr(i.description) ? i.description : ''}
                </p>
              </div>
            ))}
          </div>
        )
      }
    </div>
  </div>
</WidgetWrapper>
