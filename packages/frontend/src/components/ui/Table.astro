---
import { type Table as Props, type AstroComponent } from '#/types';
import { isFunc, isStr } from '@bpm2025-website/shared/validation';

const {
  classes = {},
  title,
  short,
  highlightFirstColumn,
  showRowIndex,
  mergeFirstCell = false,
  rows: _rows = []
} = Astro.props;

function toId(str: string | undefined) {
  if (!str)
    return null;
  return str
    .toLowerCase()
    .trim()
    .replace(/[^a-z0-9\s_-]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-');
}

const tableId = short ? toId(short) : toId(title);

if (!_rows.length) {
  throw new TypeError('[Table.astro] At least one row must be provided');
}

if (highlightFirstColumn && showRowIndex) {
  throw new TypeError('[Table.astro] Both highlightFirstColumn and showRowIndex are truthy and both are mutually exclusive');
}

const rows = _rows.map(r => r instanceof Map ? r : new Map(Object.entries(r)));
const columns = (() => {
  const c: Array<string | AstroComponent> = [];

  for (const row of rows) {
    for (const col of row.keys()) {
      if (!c.includes(col)) {
        c.push(col);
      }
    }
  }

  return c;
})();
---
<div {...(tableId ? { id: tableId } : {})} class:list={['mt-4 h-full w-full', classes.container]}>
  <div class="rounded-xl bg-white flex flex-col h-full shadow-md overflow-hidden">
    {title && (
      <div class="px-6 py-5 border-b border-gray-200 bg-gray-50">
        <h3
          class="text-xl text-gray-800 font-semibold m-0"
          set:html={title} />
      </div>
    )}

    <div class="flex-1 overflow-auto">
      <div class="flex flex-col min-w-fit w-full" role="grid">
        <div class="flex w-full top-0 sticky z-1">
          {(showRowIndex || highlightFirstColumn) && (
            <div
              class:list={[
                'w-20 h-auto min-h-20 border-r border-gray-200 bg-gray-50 lg:min-h-20 md:min-h-16 flex items-center justify-center shrink-0',
                { 'border-b': !mergeFirstCell }
              ]}
              role="columnheader">
              {showRowIndex
                ? <span class="text-lg text-gray-800 lg:text-base md:text-sm">No.</span>
                : isFunc(columns[0])
                  ? columns[0]
                  : <span class="text-lg text-gray-800 lg:text-base md:text-sm" set:html={isStr(columns[0]) ? columns[0] : undefined}></span>}
            </div>
          )}

          {columns.slice(highlightFirstColumn ? 1 : 0).map((c, index, array) => (
            <div
              class:list={[
                'font-semibold border-b border-r border-gray-200 bg-gray-50 h-auto min-h-20 md:px-1 lg:min-h-20 md:min-h-16 flex-1 flex items-center justify-center',
                { 'border-r-0': index === array.length - 1 }
              ]}
              role="columnheader">
              {isFunc(c)
                ? c
                : (
                    <div class="flex flex-col h-full items-center justify-center">
                      <div
                        class="text-lg text-gray-800 lg:text-base md:text-sm"
                        set:html={c} />
                    </div>
                  )}
            </div>
          ))}
        </div>
        {rows.map((row, rowIndex) => (
          <div class="flex w-full" role="row">
            {(highlightFirstColumn || showRowIndex) && (
              <div
                class="border-b border-r border-gray-100 border-gray-200 bg-gray-50 flex shrink-0 h-auto min-h-24 w-20 items-center justify-center xl:min-h-16"
                role="rowheader">
                {highlightFirstColumn && isFunc(row.get(columns[0]!))
                  ? (
                      <div class="flex h-full w-full items-center justify-center">
                        {row.get(columns[0]!)}
                      </div>
                    )
                  : (
                      <div class:list={[
                        'h-full w-full flex items-center justify-center pt-2',
                        classes.firstColumn
                      ]}>
                        <span
                          class="text-sm text-gray-500 font-medium text-center break-words lg:text-xs md:text-xs"
                          set:html={showRowIndex ? (rowIndex + 1) : row.get(columns[0]!)} />
                      </div>
                    )}
              </div>
            )}

            {columns.slice(highlightFirstColumn ? 1 : 0).map((columnName, index, array) => (
              <div
                class:list={[
                  'flex-1 p-0 border-b border-r border-gray-100 border-gray-200 h-auto min-h-24 relative xl:min-h-16',
                  { 'border-r-0': index === array.length - 1 }
                ]}
                role="gridcell">
                {isFunc(row.get(columnName))
                  ? (
                      <div class="flex h-full w-full items-center justify-center">
                        {row.get(columnName)}
                      </div>
                    )
                  : (
                      <div class="flex h-full w-full items-center justify-center">
                        <span
                          class="text-sm text-gray-700 text-center break-words"
                          set:html={row.get(columnName) ?? '-'}>
                        </span>
                      </div>
                    )}
              </div>
            ))}
          </div>
        ))}
      </div>
    </div>
  </div>
</div>
