---
import { type ScheduleEvent as TScheduleEvent } from '#/types';
import EventItem from './EventItem.astro';
import Table from '#/components/ui/Table.astro';
import { formatHour, getHours, type ColumnMapType } from './shared';

interface Props {
  events: TScheduleEvent[];
  locale?: Intl.UnicodeBCP47LocaleIdentifier;
  dateHeaderFormat?: Intl.DateTimeFormatOptions['weekday'];
  dateRange?: { start: Date; end: Date };
}

const {
  events = [],
  locale = 'en-EN',
  dateHeaderFormat = 'short',
  dateRange = calculateDateRangeFromEvents(events)
} = Astro.props;

// Calculate default date range from events if not provided
function calculateDateRangeFromEvents(events: TScheduleEvent[]): { start: Date; end: Date } {
  if (events.length === 0) {
    const today = new Date();
    return { start: today, end: today };
  }

  let minDate = events[0]!.start;
  let maxDate = events[0]!.end ?? events[0]!.start;

  events.forEach((event) => {
    const endDate = event.end ?? event.start;

    if (event.start < minDate) {
      minDate = event.start;
    }
    if (endDate > maxDate) {
      maxDate = endDate;
    }
  });

  return { start: minDate, end: maxDate };
};

/**
 * Creates a localized title showing the date range in the format appropriate for the locale.
 * Examples: "August 31 - September 5" (en), "31 agosto - 5 septiembre" (es)
 */
function formatWeekTitle(startDate: Date, endDate: Date): string {
  const startFormatter = new Intl.DateTimeFormat(locale, {
    month: 'long',
    day: 'numeric'
  });

  const endFormatter = new Intl.DateTimeFormat(locale, {
    month: 'long',
    day: 'numeric'
  });

  // Check if it's the same month and year
  const startMonth = startDate.getMonth();
  const startYear = startDate.getFullYear();
  const endMonth = endDate.getMonth();
  const endYear = endDate.getFullYear();

  if (startMonth === endMonth && startYear === endYear) {
    // Same month: "August 31 - 5" or "31 - 5 agosto" depending on locale
    const dayOnlyFormatter = new Intl.DateTimeFormat(locale, {
      day: 'numeric'
    });

    const startFormatted = startFormatter.format(startDate);
    const endDay = dayOnlyFormatter.format(endDate);

    return `${startFormatted} - ${endDay}`;
  }

  // Different months: "August 31 - September 5" or "31 agosto - 5 septiembre"
  const startFormatted = startFormatter.format(startDate);
  const endFormatted = endFormatter.format(endDate);

  return `${startFormatted} - ${endFormatted}`;
}

function getDaysInRange(startDate: Date, endDate: Date): Date[] {
  const days = [];
  const currentDate = new Date(startDate);

  while (currentDate <= endDate) {
    days.push(new Date(currentDate));
    currentDate.setDate(currentDate.getDate() + 1);
  }

  return days;
}

const weekDays = getDaysInRange(dateRange.start, dateRange.end);

// Group events by day
const eventsByDateKey = Object.groupBy(events, event =>
  `${event.start.getFullYear()}-${event.start.getMonth()}-${event.start.getDate()}`
);
const eventsByDay = weekDays.map((day) => {
  const dayKey = `${day.getFullYear()}-${day.getMonth()}-${day.getDate()}` as `${number}-${number}-${number}`;

  return {
    date: day,
    events: eventsByDateKey[dayKey] ?? []
  };
});

const hours = getHours(events);
---
{(() => {
  const columns = eventsByDay.map(({ date }) => () => (
    <div class="flex flex-col h-full items-center justify-center">
      <div class="text-sm text-gray-500 mb-1 lg:text-xs md:text-[10px]">
        {new Intl.DateTimeFormat(locale, { weekday: dateHeaderFormat }).format(date)}
      </div>
      <div class="text-lg text-gray-800 lg:text-base md:text-sm">{date.getDate()}</div>
    </div>
  ));

  const rows = hours.map((hour) => {
    const m = new Map() as ColumnMapType;

    m.set('', formatHour(hour, locale));
    eventsByDay.forEach(({ events }, index) => {
      m.set(columns[index]!, () => (
        <div class="group/cell flex h-full w-full">
          {events.filter(e => e.start.getHours() === hour).map(event => (
            <EventItem
              event={event}
              locale={locale}
            />
          ))}
        </div>
      ));
    });

    return m;
  });

  return (
    <Table
      title={formatWeekTitle(weekDays[0]!, weekDays[weekDays.length - 1]!)}
      highlightFirstColumn
      mergeFirstCell
      classes={{ firstColumn: '!items-start' }}
      rows={rows}
    />
  );
})()}
