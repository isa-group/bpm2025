---
import type { ScheduleEvent } from '#/data/program/schedule';

interface Props {
  event: ScheduleEvent;
  locale?: Intl.UnicodeBCP47LocaleIdentifier;
}

const {
  event,
  locale = 'en-EN'
} = Astro.props;

const categoryColors = {
  conference_1: '#3498db',
  conference_2: '#1982c4',
  demos: '#3f7cab',
  default: '#757bc8',
  forum_1: '#8ac926',
  forum_2: '#ff595e',
  forum_3: '#6a4c93',
  keynote: '#9b59b6',
  lunch: '#f39c12',
  social: '#2ecc71',
  workshop: '#e67e22'
};

function formatTime(time: Date): string {
  return time.toLocaleTimeString(locale, {
    hour: '2-digit',
    minute: '2-digit',
    hour12: false
  });
}

const endTime = event.end ?? new Date(event.start.getTime() + 60 * 60 * 1000);
const bgColor = categoryColors[event.category] || categoryColors.default;

/**
 * Duration in decimal format where 60 minutes = 100 units
 */
const durationInMinutes = (endTime.getTime() - event.start.getTime()) / (60 * 1000);
const duration = (durationInMinutes / 60) * 100;

/**
 * Start minutes offset in decimal format where 60 minutes = 100 units
 */
const startMinuteRaw = event.start.getMinutes();
const startMinute = startMinuteRaw > 0 ? (startMinuteRaw / 60) * 100 : 0;
---

<div
  class="event-item relative z-2 h[var(--duration)] w-full cursor-pointer overflow-hidden break-words rounded-md bg-white px-3 py-2 hyphens-auto transition-all duration-200 hover:z-3 hover:h-auto hover:min-h-[var(--duration)] hover:transform-scale-115 hover:transform md:px-1.5 md:py-1 hover:shadow-lg hover:-translate-y-0.5"
  style={{
    'top': `${startMinute}%`,
    'borderLeft': `4px solid ${bgColor}`,
    '--duration': `${duration}%`
  }}>
  <div
    class="absolute inset-0"
    style={{
      backgroundColor: `${bgColor}15`
    }}
  >
    <div class="p-1">
      <div class="mb-1 text-[0.7rem] text-gray-700 font-semibold hyphens-auto opacity-80 lg:text-[0.6rem] md:text-[0.6rem]">{formatTime(event.start)} - {formatTime(endTime)}</div>
      <div class="mb-1 text-[0.8rem] text-gray-800 font-semibold leading-tight hyphens-auto lg:text-xs md:text-[0.7rem]">{event.title}</div>
      {event.location && <div class="mb-1 flex items-center gap-0.5 text-[0.7rem] text-gray-600 hyphens-auto lg:text-[0.6rem] md:text-[0.7rem]">📍 {event.location}</div>}
      {event.description && <div class="line-clamp-3 text-[0.7rem] text-gray-600 leading-tight hyphens-auto lg:text-[0.6rem] md:text-[0.7rem]">{event.description}</div>}
    </div>
  </div>
</div>

<style>
:global(:has(> .event-item:hover)) > .event-item:not(:hover) {
  display: none;
}
</style>
