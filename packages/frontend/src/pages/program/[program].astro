---
import Headline from '#/components/ui/Headline.astro';
import Table from '#/components/ui/Table.astro';
import ItemList from '#/components/ui/ItemList.astro';
import WidgetWrapper from '#/components/ui/WidgetWrapper.astro';
import PageLayout from '#/layouts/PageLayout.astro';
import { getImage } from 'astro:assets';

import { program_overviews, program_name_to_uri } from '#/data/program';
import badgeImg from '#/assets/images/program/badge/bpm2025-badge.png';
import { isStr } from '@bpm2025-website/shared/validation';
import { parse } from 'marked';

/**
 * Dynamic route generator
 */
export function getStaticPaths() {
  return program_overviews.map(o => ({ params: { program: program_name_to_uri(o.name) } }));
}

const program = program_overviews.find(o => program_name_to_uri(o.name) === Astro.params.program)!;

if (!program.tables?.length && !program.items?.length) {
  throw new Error(`Program "${program.name}" does not have tables or items defined.`);
}

const { src: badgeSrc, attributes } = await getImage({ src: badgeImg });

for (const key of ['width', 'height', 'href', 'description']) {
  delete attributes[key];
}

---
<PageLayout
  metadata={{
    title: `${program.name} Program`,
    description: `The detailed program of the ${program.name}`
  }}>
  <WidgetWrapper bg>
    {(program.location || program.date) && (
      <Headline
        subtitle={
          Array.isArray(program.location)
            ? `📍 ${program.location.map(loc => loc.name).slice(0, -1).join(', ')}${program.location.length > 1 ? ' and ' : ''}${program.location[program.location.length - 1].name}`
            : program.location && `📍 ${program.location.name}`
        }
        tagline={program.date && `📅 ${program.date}`} />
    )}
    {program.tables
      ? program.tables.map((t) => {
        // @ts-expect-error - TypeScript can't see that we are safely checking for instance of Map when replacing
          t.rows = t.rows.map((row) => {
            if ('Artifact' in row && isStr(row.Artifact)) {
              const component = (
                <a
                  href={row.Artifact}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="flex h-full w-full justify-center">
                  <img
                    src={badgeSrc}
                    {...attributes}
                    alt="Artifact Badge"
                    class="w-[60%] cursor-pointer" />
                </a>
              );

              if (row instanceof Map) {
                row.set('Artifact', component);
              } else {
                row.Artifact = component;
              }
            }

            return row;
          });

          return (
            <>
              <Table {...t} />
              {t.description
                && (
                  <WidgetWrapper>
                    <Fragment set:html={parse(t.description, { async: false })} />
                  </WidgetWrapper>
                )}
            </>
          );
        })
      : <ItemList items={program.items} />}
  </WidgetWrapper>
</PageLayout>
