---
import PageLayout from '#/layouts/PageLayout.astro';
import WidgetWrapper from '#/components/ui/WidgetWrapper.astro';
import WeekView from '#/components/ui/Schedule/WeekView.astro';
import { sections } from '#/data/program/overviews';
import Headline from '#/components/ui/Headline.astro';
import LocationView from '#/components/ui/Schedule/LocationView.astro';
import Booklet from '#/components/widgets/Booklet.astro';
import type { ScheduleEvent } from '#/types';
import { getPermalink } from '#/utils/permalinks';

const pdfBooklet = '/program/Program_booklet.pdf';

function sortEventsForWeekView(a: ScheduleEvent, b: ScheduleEvent) {
  if (a.category === 'conference_1' && b.category !== 'conference_1') return -1;
  if (a.category !== 'conference_1' && b.category === 'conference_1') return 1;
  return 0;
}

function formatDayLabel(events: ScheduleEvent[]) {
  const d = events?.[0]?.start;
  if (!d) return 'Day';
  return new Intl.DateTimeFormat('en-GB', {
    weekday: 'short',
    day: 'numeric',
    month: 'short'
  }).format(d); // e.g., "Tue 2 Sep"
}
---

<PageLayout
  metadata={{ title: 'Program Overview', description: 'Schedule of the conference' }}
  heroProps={{
    subtitle: 'Hover over the events to see the description & the location<br />Click on them to see the full program',
    actions: [
      { variant: 'primary', text: 'Program booklet', href: pdfBooklet, icon: 'i-tabler:download', target: '_blank' },
      { variant: 'primary', text: 'Proceedings', href: getPermalink('/proceedings'), icon: 'i-tabler:book' }
    ]
  }}
>
  {sections.map((s, index) => {
    const sorted_events = [...s.events].sort(sortEventsForWeekView);
    const days = new Set(s.events.map(e => e.start.getDate()));
    const hasSplit = Array.isArray(s.split) && s.split.length > 0;

    return (
      <WidgetWrapper bg={index % 2 === 0} id={s.title?.split(' ')[0]?.toLowerCase()}>
        <Headline {...s} />

        {/* MOBILE: if split, stack WeekView per day; else original fallback */}
        <div class="md:hidden">
          {hasSplit
            ? (
                <div class="space-y-6">
                  {s.split!.map((dayEvents) => {
                    const daySorted = [...dayEvents].sort(sortEventsForWeekView);
                    return (
                      <section class="rounded-lg">
                        <h3 class="text-sm text-gray-600 font-semibold mb-2">
                          {formatDayLabel(daySorted)}
                        </h3>
                        <WeekView events={daySorted} />
                      </section>
                    );
                  })}
                </div>
              )
            : (
                <>
                  {days.size === 1
                    ? (
                        <LocationView events={sorted_events} />
                      )
                    : (
                        <WeekView events={sorted_events} />
                      )}
                </>
              )}
        </div>

        {/* DESKTOP: unchanged */}
        <div class="hidden md:block">
          {days.size === 1
            ? (
                <LocationView events={sorted_events} />
              )
            : (
                <WeekView events={sorted_events} />
              )}
        </div>
      </WidgetWrapper>
    );
  })}

  <WidgetWrapper>
    <Headline title="Program Booklet" />
    <Booklet />
  </WidgetWrapper>
</PageLayout>
